@page "/fetchdatastreaming"
@using BlazorGrpcWeb.Shared
@using System.Net
@using System.Threading
@using BlazorGrpcWeb.Protos
@using Google.Protobuf.WellKnownTypes
@using Grpc.Core

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (!_forecasts.Any())
{
    <button @onclick="OnStartFetch">Start fetching</button>
}
else
{

<button @onclick="OnStopFetch">Stop fetching</button>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in _forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToDateTime().ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    [Inject]
    private WeatherForecastStreamingService.WeatherForecastStreamingServiceClient WeatherForecastClient { get; set; }

    private readonly List<WeatherForecastStreamDTO> _forecasts = new();

    private readonly CancellationTokenSource _cancellationTokenSource = new();

    private async Task OnStartFetch()
    {
        using var streamingCall = WeatherForecastClient.GetWeatherStream(new Empty(), cancellationToken: _cancellationTokenSource.Token);

        try
        {
            await foreach (var weatherData in streamingCall.ResponseStream.ReadAllAsync(cancellationToken: _cancellationTokenSource.Token))
            {
                _forecasts.Add(weatherData);

                StateHasChanged();
            }
        }
        catch (RpcException ex) when (ex.StatusCode == StatusCode.Cancelled)
        {               
            
        }
    }

    private void OnStopFetch()
    {
        _cancellationTokenSource.Cancel();
    }


}
